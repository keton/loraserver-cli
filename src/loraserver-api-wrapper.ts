import * as API from "loraserver-api-client-nodejs";
import http from 'http';

export default class LoraServerApi {
	private basePath:string;

	//bearer token API key
	private apiKey:API.ApiKeyAuth=new API.ApiKeyAuth("header", "Grpc-Metadata-Authorization");

	//autogenerated API objects
	private internalApi:API.InternalServiceApi;
	private applicationsApi:API.ApplicationServiceApi;
	private deviceServiceApi:API.DeviceServiceApi;

	/**
	 * Helper function that formats http.ClientResponse|any error object into readable message
	 * 
	 * @param error error object returned by autogenerated API
	 * @param msg formatted error message prefix
	 * @param func function to call with formatted error string as parameter, typically reject()
	 */
	private formatError = (error: any, msg: string, func: Function) => {
		if (error.response && error.response.statusCode && error.response.statusMessage) {
			var err = <{ response: http.ClientResponse; body: any; }>error;
			func(msg + " error " + err.response.statusCode + ": " + err.response.statusMessage);
		} else {
			func(error);
		}
	}

	/**
	 * Class constructor
	 * 
	 * @param basePath Server URL (i.e. https://localhost:8080)
	 */
	constructor(basePath:string) {
		this.basePath=basePath;
		this.internalApi=new API.InternalServiceApi(this.basePath);
		this.applicationsApi=new API.ApplicationServiceApi(this.basePath);
		this.deviceServiceApi=new API.DeviceServiceApi(this.basePath);

		this.applicationsApi.setDefaultAuthentication(this.apiKey);
		this.deviceServiceApi.setDefaultAuthentication(this.apiKey);
	}

	/**
	 * Login to server and obtain bearer token for use with APIs that require authentication
	 * 
	 * @param user Username
	 * @param password Password
	 */
	public login = async (user: string, password: string) => {
		return new Promise<void>(async (resolve, reject) => {
			try {
				var resp = await this.internalApi.login({
					username: user,
					password: password
				});
				this.apiKey.apiKey = resp.body.jwt;
				resolve();
	
			} catch (error) {
				this.formatError(error, "LoraServerApi.login()", reject);
			}
		});
	}

	public getApplicationList = async (options?: { limit?: number, offset?: number, organizationId?: string, search?: string }) => {

		var limit = "1000";
		var offset: string | undefined = undefined;
		var organizationId: string | undefined = undefined;
		var search: string | undefined = undefined;
	
		if (options) {
			if (options.limit) limit = options.limit.toString();
			if (options.offset) offset = options.offset.toString();
			if (options.organizationId) organizationId = options.organizationId;
			if (options.search) search = options.search;
		}
	
		return new Promise<API.ApiApplicationListItem[]>(async (resolve, reject) => {
			try {
				var res = await this.applicationsApi.list(limit, offset, organizationId, search);
				resolve(res.body.result);
			} catch (error) {
				this.formatError(error, "getApps", reject);
			}
		});
	}

	public getDeviceList = async (options: { limit?: number, offset?: number, applicationID?: string, search?: string, multicastGroupID?: string, serviceProfileID?: string }) => {

		var limit = "1000";
		var offset: string | undefined = undefined;
		var applicationID: string | undefined = undefined;
		var search: string | undefined = undefined;
		var multicastGroupID: string | undefined = undefined;
		var serviceProfileID: string | undefined = undefined;
	
		if (options) {
			if (options.limit) limit = options.limit.toString();
			if (options.applicationID) applicationID = options.applicationID;
			if (options.search) search = options.search;
			if (options.multicastGroupID) multicastGroupID = options.multicastGroupID;
			if (options.serviceProfileID) serviceProfileID = options.serviceProfileID;
		}
	
		return new Promise<API.ApiDeviceListItem[]>(async (resolve, reject) => {
			try {
				var res = await this.deviceServiceApi.list(limit, offset, applicationID, search, multicastGroupID, serviceProfileID);
				resolve(res.body.result);
			} catch (error) {
				this.formatError(error, "getDevices", reject);
			}
		});
	}



}